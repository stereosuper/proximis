{"version":3,"sources":["webpack:///./wp-content/themes/proximis/src/js/components/united.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAyC;AACoB;;AAE7D;AACA;;AAEA;;AAEA,IAAI,6DAAa;;AAEjB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sBAAsB,8CAAS;AAC/B;AACA;AACA;AACA,kBAAkB,2CAAM;AACxB,SAAS;AACT;;AAEA;AACA;;AAEA,QAAQ,2DAAW;AACnB,wBAAwB,2DAAW;AACnC;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,yBAAyB,2DAAW;AACpC;AACA,SAAS;AACT;;AAEA,eAAe,wBAAwB;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEe,gFAAiB,EAAC","file":"united.js","sourcesContent":["import { TweenLite, Linear } from 'gsap';\nimport { superScroll, superPolyfill } from '@stereorepo/sac';\n\nconst unitedAnimHandler = () => {\n    const united = document.getElementById('united');\n\n    if (!united) return;\n\n    superPolyfill.initializeIntersectionObserver();\n\n    const words = united.querySelectorAll('.js-word');\n\n    let windowHeight = window.innerHeight * 0.65;\n\n    // Constants used to create the intersection observer threshold array\n    const samplesNumber = 100;\n    const thresholdSamples = [];\n    let index = 0;\n    let observer = null;\n\n    let animLaunched = false,\n        oScrollTop = 0;\n\n    const init = () => {\n        const tween = TweenLite.to(words, 1, {\n            x: 0,\n            y: 0,\n            paused: true,\n            ease: Linear.easeNone\n        });\n        let progress = 0;\n\n        animLaunched = true;\n        windowHeight += oScrollTop;\n\n        superScroll.addScrollFunction(() => {\n            progress = (superScroll.scrollTop - oScrollTop) / windowHeight;\n            if (progress >= 0) tween.progress(progress);\n        });\n    };\n\n    const intersectionCallback = entries => {\n        entries.forEach(entry => {\n            if (entry.intersectionRatio < 0.2 || animLaunched) return;\n            oScrollTop = superScroll.scrollTop;\n            init();\n        });\n    };\n\n    for (index; index <= samplesNumber; index++) {\n        thresholdSamples[index] = index / samplesNumber;\n    }\n\n    observer = new IntersectionObserver(intersectionCallback, {\n        root: null,\n        rootMargin: '0px',\n        threshold: thresholdSamples\n    });\n\n    observer.observe(united);\n};\n\nexport default unitedAnimHandler;\n"],"sourceRoot":""}